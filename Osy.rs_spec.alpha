# "module" and "use" declaration 
   // module syntax 
   mod my_mod      
   mod my_mod.{}
// mod my_mod;
// mod my_mod {}

   // use syntax
   use transmute::mem::std :<TM>
   use { transmute::mem :<TM>, {self, sleep :<slp>}::thread  }::std
   use { transmute::mem :<TM>
         { self
           sleep :<slp>}::thread :<slp>
         :<i32>Option::option :<Op_i32> }::std
// use std::mem::transmute as TM;
// use std::{ mem::transmute as TM, thread::{self, sleep as slp }}
// use std::{ mem::transmute as TM, 
//            thread::{self,
//                     sleep as slp },
//            option::Option<i32> as Op_i32}

# reference
   x.&
// &x

   x.!&     // disallow unary &
// &mut x

   a.!&
     `x! i32!& @
// let mut x: &mut i32=
//   &mut a;


# negative numbers with '_'  // this is not considered an operator

   // ints
   _1
// -1

  // floats
   _0.5
// -0.5

   // hex
   _0x4A
// -0x4A

   // binary
   _0b1011_0001   // you can still use '_' to speparate following digits
// -0b1011_0001


   // negate '-' vs negative '_'

   // if you want the Rust identifier '_{num}' ie '_1'
   // you need '__1', one '_' will be removed when transpiled
   // '_1e
   5 @ __1
// let _1 = 5



# Left to right operators
   2 + 7 * 5
// (2+7) * 5
45

   // scopes {} are required to change precidence, you cannot use () // () is reservered for tuples
   2+{7*5}
// 2+(7*5)
37

   x*
// *x

   x?
// x?

   x.&  // unless a new unary '&' is made
// &x

   // operators can be made postfix with '`' , the postfix operator
                // (the postfix operator does not work on itself)
   1`2 +
// 1 + 2

   // you can use '`' to chain an operator with the previous line
   1 
   `2 +
// 1
// + 2



# ';' to use a function with void arguments, you need to give a void argument //TODO ';:' ?
   ;make_one
// make_one()
1

type i32arith
# function declaration mirrors usage
   fn\ x:f y \ i32: i32->i32 {}

   // Various type signatures
   fn\ w:f x y\ i32: i32 i32     -> i32
// fn(w: i32, x: i32, y: i32) -> i32

   fn\ x:f y  \ i32: i32         -> i32: ->i32:->i32
// fn(x:i32,y:i32)            -> fn(fn(i32)->i32)->i32

   fn\ x:f y  \ i32: i32         ->(i32, i32: ->i32 )
// fn(x:i32,y:i32)            ->(i32,fn(i32)->i32)

   fn\ x:f y  \ i32: i32         -> i32: i32 ->i32
// fn(x:i32,y:i32)            -> fn(i32,i32)->i32

   \ :f     \ {}               ->i32
// fn f()                     ->i32


   fn\ x:<'a T>f y z \ i32: T!&'a T* -> 'a&str {;!todo}
// fn f<'a,T>(x:i32,y: &'a mut T,z: *const T) -> &'a str {todo!()}

   // trait bounds cannot be placed in the angle brakets, only 'where clauses'
   // 'where' clauses are written with '|', '|' also takes the place of comma
   // '+' is the same as in Rust
   // '-' is between a type and it's bounds 

   fn\ x:<T G>f y \ T:G- | T - Display + Clone | G - Debug {}      // '-' is the same as ->() 
// fn f<T,F>(x:T,G) where T : Display + Clone, G: Debug

   // Trait bounds with generic parameters
   | String - <T>PartialEq
// where String: PartialEq<T>

   // higher rank trait bounds 
   | F -<'a>- i32&'a:Fn-
// where F: for<'a> Fn(&'a i32)
// where for<'a> F: Fn(&'a i32)


   // Here is a more complex function signature on multiple lines

   fn\ first:<T,G,U>func last
     \ T: G -> U                  // if it is on another line it does not require comma
       | T - Display + Clone
       | G - Debug
       | U - Copy 
           + SomeReallyLongTrait
   {}
// fn f<T,G,U>(x: T,y: G)-> U
// where T: Display + Clone, 
         G: Debug,
         U: Copy 
          + SomeReallyLongTrait
   {}

# Const
   // Const Values
   #FIVE i32 5
// const FIVE: i32 = 5;

// const generics
   struct\ <Sign Num Denom>Rat 
     | #Sign char 
     | #Num u64
     | #Denom u64
  
   impl\<#S char 
      #N u64 
      #D u64>
   <S N D>Rat 
   {
     fn\ .real                               // self.real is okay
       \ Self&. -> f64 {                       // "Self&:->f64" is fine too
       N :<f64> / {D :<f64>}                    // as is :<primitive> followed by 
       `val f64@                                // no arguments requires '_' after
       S ? {
         '+' => val
         '-' => _1.0*val
         ;!panic }}
   }
// struct Rat<const SIGN: char,
//            const NUM: u64,
//            const DENOM: u64>;
//
// impl<const S: char, 
//      const N: u64, 
//      const D: u64> 
// Rat<S, N, D> 
// {
//   fn real(&self) -> f64 {
//     let val = N as f64 / D as f64;
//     match S {
//       '+' => val,
//       '-' => val * (-1.0),
//       _   => panic!(), }}
// }



# 'let' assignment is postfix and uses the bind operator '@'
// use '`' to take the expression from the previous line
// @ returns the bound variable unless
   5 @ f
// let f = 5;

   5 @ f i32
5
// let f:i32 = 5;
5

   4 @ x i32:-  :following         // note "_:-" and ";-"   indicate a type
   4 @ x ;-     :following
   4 @ x ;->i32 :following
// let x: fn(i32)->() = 4;
// let x: fn() = 4;
// let x: fn() = 4;

   // notice it returns the whole binding
   (5,6) @ (f, g) (i32,i32) 
(5,6)
// let (f,g) (i32,i32)=(5,6); (f,g)
(5,6)

   //use '!' to declare it mutable
   56 @ f! u64
// let mut f:u64 = 56;

   // clarify assignment by placing it 
   // own line using the postfix operator
   56 
     `f! u64 @
// let mut f:u32 
//   = 56;


# free functions are postfix
   3:increment
// increment(3)
4

   // free functions can be infix,
   // the first argument is on the left, the rest are on the  right
   3:multiply 5
// multiply(3,5)
15

   1:add_triple 2 3
// add_triple(1,2,3)
6
   // you can enforce postfix for free functions with '`'
   // this is useful to ensure imported rust code has meaninful names
   3`5 :multiply 
// multiply(3,5)
15

   1.add 1`2 3:add_triple  
// add_three(1.add(1),2,3)
7
   1.add 1 2`3:add_triple // however the placement does matter
// add_triple(1.add(1,2),3)


# tuples require parens  // trailing comma okay?
   5 :mul_div (3,4)   // free function
   5 .mul_div (3,4)   // method
// mul_div(5,(3,4))
// 5.mul_div((3,4))

   // unit tuple
   ()
// ()

   // single tuples
   (5)
// (5,)

   // a tuple over multiple lines does not require commas, they are optional
   (1
    2
    3)
   `(one, two, three)
    (i32, i32, i32  ) @ _
// let (one, two, three):
       (i32, i32, i32) = (1,
                          2,
                          3)

# struct tuples 
   // define a struct tuple
   struct\ _:myInt \ i32:->MyInt   // i32:->_ is okay
// struct MyInt(i32);

   // Void argument tuple struct
   struct\ ;MyInt \ ;->_
// struct MyInt();

   // Void struct and anonimous tuple struct are hard errors
   struct\ : \ ;->
   struct\ :_ \ ;->_
   struct\ _:_ \ i32:i32->_
// struct ()
// struct _()
// struct _(i32,i32)

   // on two lines
   struct\ _!:MyInt      /note the '!' marks public
         \ i32:->_
// struct myInt(i32);

   //constructor is the same as for free functions
   3:MyInt
// MyInt(3)

   struct\ _:Gen _! _
         \ i32:<T U> T U->_                                 // :<f64>
     | T - Copy | U - Display
// struct Gen<T,U>(i32, pub T, U)
//   where T : Copy, U : Display;

# Enums
   // define an Enum
   enum\ MyBool.{ true:T, false:F }
// enum MyBool { T(true), F(false) }

   commas can be ommited when on multiple lines
   enum\ MyBool.{ true:T 
                  false:F }
// enum MyBool { T(true),
//               F(false) }

   // enum variant constructors are also the same as free functions
   3:Some
// Some(3)

# methods and free functions look similar, free functions use ":" methods use "."
   //methods with only an initial self are postfix
   3.increment
// 3.increment()
4

   vec.into.sum
// vec.into().sum()

   //methods with other arguments are infix
   3.add 2
// 3.add(2)
5

   // like free functions they can be made postfix // ?
   3`2.add 
// 3.add(2)
5

  // chaining an infix with a postfix
   3.eq 5.not
true


# expressions can be continued to the next line of text if the next line starts with '.' or ':' 
//            (in other words starts with a funtion or a method)
   2
   .add 3 
   :increment
   `x i32@
6
// let x:i32 = increment(2
//   .add(3));
// x
6

   // this works with postfix '`'
   2
     `3.add 
     `x i32 @
5
// let x:i32 = 2
//   .add(3);
// x
5


   // if the next line does not start with a method, function or '`', the expression does not continue
   {2 @ x i32
    4+3
    x+2
			}
4

// {let x:i32 = 2;
//  4+3;
//  x+2
// }
4

   // an expression can be surpressed with ' _' the space is relavent
   5;    // maybe '_'
   5 _   // maybe '_'
()
// 5;
()

   // statements can be put on the same line with ' _ ' the spaces are relavent
   x.pop _ x.pop _ x.pop _      // note this requires ' ' after ' _'
// x.pop(); x.pop(); x.pop();

   // '_' by itself is equivalent to a rust ';'
   _
// ;


# normal structs
// Rust 'pub' with '!'
   // defining structs
   struct\ MyStruct.{@x! i32, @y i32,@z i32}
// struct MyStruct {pub x: i32, y: i32, z: i32}

   // 
   MyStruct.{5 @x, 7 @y, 4 @z}
// MyStruct {x:5, y:7, z:4}

   MyStruct.{5 @p @x, 7 @y, 4 @z}        // variable binding in the expression will work
// MyStruct {x:{let p= 5,y}, y:7, z:4}   // however the last binding must be the field

   MyStruct.{5@x @p, 7 @y, 4 @z}         // this is an error, struct field is 'x' not 'p'
// MyStruct {p:{let x= 5,y}, y:7, z:4}

   MyStruct.{{5@p} @x   // unless absolutely needed, try to use expressions without variables assignment
             7 @y       // it will still work, but it isn't very elegant
             4 @z }
// MyStruct {x:{let p= 5,y},
                y:7,
                z:4}


   MyStruct.{x                  // same name identifier
             4 @ y              // "," is not required for multiline
             ..OldStruct }
// MyStruct {x,
             y:4,
             ..OldStruct }

   // field access
   MyStruct.!x
// MyStruct.x

#Traits
   // Supertraits
   trait\ Circle - Shape {}
// trait Circle:Shape{}"

   trait\ Circle | Self - Shape {}
// trait Circle where Self:Shape{}

   // associated types
   trait\ A {@B - Copy}
// trait A {type B:Copy;}
   trait\ A | B::Self - Copy { @B }
// trait A where Self::B:Copy {type B;}

   //impl a trait
   impl\ MyType - Circle {}
// impl Circle for Mytype {}

   impl\<T> <T>MyType - Circle {}
// impl<T> Circle for Mytype<T> {}

   impl\ dyn-MyTrait {}
// impl dyn MyTrait {}

   impl\ dyn Error + 'static {}
// impl dyn Error + 'static {}

   impl\ {dyn-Error + 'static} - Circle{}
// impl dyn Error + 'static : Circle {}

# Closures
// Closures use a backslash followed by the body
// Closures are scoped, unlike in Rust
// In Rust terms: 
//   "|args|{expr}" will always be "{ |args|{expr} }"
// variables used in a closure must be lowercase // TODO is this enough

   // void closures use one backslash
   \|{7}
// {||7}

   // typing a closure requires a second '|'
   \|        {}
   \||       {}
   \|| ;     {}
   \|| -     {}
   \|| ;->() {}
   \|| ->_   {}
   \|| ;->_  {}
   \|| ;-    {}
// ||->()

   \|_:{4}
// {|_:|4}

   \|x:|->i32{x}
// {|x|->i32{4}}

   \|x: _{x+3}
// {|x,_|x+3}

   \|x: y{x+y}

   \|a: b c{a*b+c}
// {|a,b,c| a*b+c}

   // gradual typing
   // '_' is required when doing gradual typing
                      // the number of arguments must match
   \|x: y| i32: _ {x+y} 
// |x: i32,y: _|x+y

   \|x: y|_: i32 {x+y}
// |x: _, y: i32|x+y

   \|x: y|_ _   {x+y}
   \|x: y|_:_   {x+y}  // this is probably okay 
   \|x: y|_:_->_{x+y}  

   \|x: y| ->i32{x+y}                            // "_->_" argument type? "_-"
   \|x: y|:->i32{x+y}  // this is probably okay 
// {|x,y|->i32{x+y}}

   \|x: y|i32: i32->i32{x+y}
// {|x: i32, y: i32|->i32{x+y}}

   \|x!: y| i32:i32->i32{
         x.increment _ x+y }  // assuming '.increment' takes a !self
// {|mut x: i32, y: i32|->i32{
//       x.increment(); x+y }}

   // full explicit
   \|a: b c| i32: i32 i32 ->i32 {a*b+c}
// {|a: i32, b: i32, c: i32|->i32 {a*b+c}}

   // use it immediately like a function
   3 :\|x{x*5}
// 
15

# Attribute Macros use %
   %Debug:derive %inline
// #[derive(Debug)]#[inline]
   // check it
   %foo:bar => #[bar(foo)] vs %foo@bar => #[bar = foo]
   #[bar()] is %;foo

// TODO move closure, asyc closures
// Rust "async ||"
// |x| async move {} instead of async move |x| {}
//
// async blocks
// async move blocks
// async move closures
// move closures

# anotated blocks Blocks
// all special blocks start with a non function, 
// non method followed by the body, delimited by '.'
   
   async.{}
   move.{}        // add move blocks for completeness? what is the difference with a move closure?
   async-move.{}

   // field structs have the same syntax
   ima_struct.{}

   // shorthand ?
   \AM.{}
// async move{}

   \M.{}
// move {}

# the ? operator still exists for one argument
   io_action ? .unwrap
// io_action()?.unwrap()

# the ? operator for two arguments is a match
   io_action ? {
      io:Ok  => io:Some
      _ :Err => None     }
// match io_action {
//    Ok(io) => Some(io),
//    _      => None     }


// all control flow is done with match operator "?"
  // "if" is only a keyword inside match, else does not exist, 
  // as sugar:
  //
  //         : matching on true with return type "()" can be written: x?{ if {proc}} 
  //                                               // this works too: x?{ if => {proc}} 
   x? {if {"x was true"}:!println}
// if x {println!("x was true")}
// match x {true => println!("x was true"), _=>() }

  //         : matching on a bare expression assumes fallback case
  //                           _ => 5  
  //                       is: 5
  //                           _ => 5, // Rust

  //         : you can emulate "else" using the bare expression rule
  //                       // this works work return types other than "()"
   x ? {if 5,6}
// if x {5}else{6}
// match x {true => 5, _ => 6}
  //         : _ if {expr} => can be done without _
  //                           _ if x.lt 5 => 4  // it is still okay to be explicit
  //                       is: if x.lt 5 => 4
  //                           _ if x.lt(5) => 4, // Rust 
  //         : NOTE, '_' , "()" or "{}" as an expression will end the match with "_=>()"
  //                                           // this syntax is effectively never required
  //                           _=>() 
  //                       is: _
  //                       or: ()
  //                       or: {}
  //                           _=>(), // Rust


   x ? { e:Some if e.gt 4 => 5,_=>6}
// match x {Some(e) if e<4 => 5,_=>6}

   // '@' binding in match is postfix
   // bindings must be used; ie: '@' requires "=>"
   x ? { 0..=5 @ e :Some => {e @ f _ f+1}  // Note, the second @ is a let binding
         0}
// match x { Some(e @ 0..5) => {let f = e; f+1},
             _ => 0}

   //matching on structs
   struct Point.{@x i32, @y i32}
   p? { Point.{_ @ x
               5..=8 @e @y} => _
        _                        }
// struct Point {x: i32, y: i32}
// match p { Point{x:_
//                 y: e @ 5..=8 }
//           _ => ()              }

# range syntax is the same 
              // right now nothing requires two consequetive '.'s
              // if there is an issue, "_.." might be the solution
   0..5
// 0..5

   0..=5  // ranges will require a full match on "..="
// 0..5

   3.._
// 3..

   _.._
// .. 

   _..4
// ..4

   _..=7
// ..=7


# all floats must have numbers on both sides of the '.' 
   6.0
// 6.0
   // writing it in Rust short form is not allowed
   6.0
// 6.

# macros can only have one argument // ?
# add inline Rust code with a macro ?
# using macros/attriutes  // attribute macros use % instead of #

## LOOPS
// no 'for' loops // find a good solution.
// There are no "while" loops, // expression priority syntax.
// There are no "infinite" loops.
// all loops are in fact "match loops".
// all 'match' loops are expressions
// There are no bare loops, only loop functions and loop closures.
// All loop closures are "move" closures
// All loops require a bare "{expr}.break" in the outer loop, 
//              // or {expr}.return
//                       // loops are not checked for soundness beyond that
// "continue" follows the same label semantics as break
// an ending continue is required

// maybe require that loops take a called closure as an argument. // is this terible for generics?


   // loops are written "x'{}" where 'x' is matched       // see '?' operator
   fn\ .f \ Self!&. i32->i32 
   self'{                                          // <- here is our loops
       if self.!y > 0 => { self.increment
                           self.y!.decrement }
       self.!inner.break}
   }

// fn f(&mut self)->i32 
// { 
//   loop {
//     match self { 
//       _ if self.y > 0 => { self.increment;
//                            self.y.decrement }
//       _ => break self.inner             
//     }
//   }
// }

   // using a loop closure
   \|x! x'{ 0 => 1 =+ x, x.break }
// move |x| loop { match x { 0 => x += 1, _=> break x } }

   // Labels are of the form "x'inner{}" where x is a value to match and inner is an ident
   // Labels make inner loops possible
   // Breaking from inner loops are of the form
              // "x.break'inner"
   // like Rust labels, you can break from a deep inner loop to 
              // a less deeply nested inner loop
   // Labels are only allowed inside loop bodies
   \|x! ,x'{ 0 => x + 1 @ x _
            if x < 20 => x'inner{
              _=> x'way_inner{
                2 => x.break'          // .return is prefered but this is allowed
                _ => 20.break'inner 
              }
            }
            x.break
          }
// move |x| 'outer: loop {             // the outer most loop must be named in Rust
//   match x { 0 => x += 1,
//             if x < 20 => 'inner: loop {
//               match x {
//                 _=>'way_inner: loop{
//                   match x {
//                    2 => break 'outer x
//                    _ => break 'inner 20 
//                   } 
//                 }
//               }
//             },
//             _=> break x }
// }

   // a true infinite loop is still possible...
   fn\ :infinite , ;- ;'{if true => continue
                       ().break            }    // syntax sugar "().break" as "break" ?
// fn infinite() {loop{ match _ {
                       _ if true =>continue,
                       _=>break             }}}

# loop examples
fn\ w:f h
  \ ;- 
(0,0)@ (x!,y!) (i32,i32)'{
  if x==w => (0,y+1)@(x,y) _
  if y!=h => (x+1,y)@(x,y) _
  ().break
} 


   fn\ .recv!
     \&Self. -> <T>Option 
   { self.!dequeue_pos.load Relaxed @ pos!

     \|x: y { 
       y.&.!buffer[x & {N - 1}] @cell
       cell.!seq.load Acquire :<isize> - {x :<isize> + 1} @ dif

       (cell,dif) 
     } @ cell_dif 

     \|p! c_d s , p:c_d s'{
         (cell,0)=>{
           self.!dequeue_pos
               .compare_exchange_weak pos {pos + 1} Relaxed Relaxed @res
           res ? {
             _:Ok => { 
               \U.{ cell.!data.take } @data

               cell.!seq.store {pos + N} Release 
               data:Some.break                  }
             e:Err => e = pos 
           }
         }
         (_,dif) if dif < 0 => None.break
        _=> self.!dequeue_pos.load Relaxed = pos
     } @loop_closure

   pos :loop_closure cell_dif self
   }



// pub fn recv(&self) -> Option<T> {
//     let mut pos = self.dequeue_pos.load(Relaxed);
//     let cell = loop {
//         let cell = &self.buffer[pos & (N - 1)];
//         let seq = cell.seq.load(Acquire);
//         let dif = seq as isize - (pos as isize + 1);
//         if dif == 0 {
//             let res = self
//                 .dequeue_pos
//                 .compare_exchange_weak(pos, pos + 1, Relaxed, Relaxed);
//             match res {
//                 Ok(_) => break cell,
//                 Err(e) => pos = e,
//             }
//         } else if dif < 0 {
//             return None;
//         } else {
//             pos = self.dequeue_pos.load(Relaxed);
//         }
//     };
//     let data = unsafe { cell.data.take() };
//     cell.seq.store(pos + N, Release); // pos + N is really pos + mask + 1 here.
//     Some(data)
// }






reclaim these operators:
// if I can change the generic syntax then perhaps more operators will be okay
//
// using the all caps versions will ensure the code will print the operator in the 
// eventual rust output 

!   => NOT  or .not // Must change, conflict with !&
<   => LT   or .lt      <
>   => GT   or .gt      >
==  => EQ   or .eq      =
!=  => NE   or .ne      [!=] // this can be done with "x==y!" or "x`y==!"
<=  => LE   or .le      [<=]
>=  => GE   or .ge      [>=]
+   => ADD  or .add     +
-   => NEG  or .neg     -
-   => SUB  or .sub     -
*   => MUL  or .mul     *
/   => DIV  or .div     /
%   => REM  or .rem     %
>>  => SHR  or .shr     [>>]
<<  => SHL  or .shl     [<<]
&   => AND  or .bitand  &
|   => OR   or .bitor   |
^   => XOR  or .bitxor  ^

&& => and    [||]       // these are not implemented as traits so these will become keywords
|| => or     [&&]

replace versions that return &!Self // Rust: &mut Self
^=   => =XOR or .bitxor_assign
&=   => =AND or .bitand_assign
|=   => =OR  or .bitor_assign
>>=  => =SHR or .shr_assign
<<=  => =SHL or .shl_assign

   // assign in place for normal functions // does this make sense for methods? probably not
   5 @:func x
// x = func(5,x)

   // this works for expressions too
   // assignment will return the assigned value
   {4+3} @! x       // this is okay because binary '!' does not exist
7







# Type annotation
// fn types should be the only ones with spaces
// this is so types are one element
!         => NEVER // leave ! for mut/pub/inner attribute/declarative macros
*const T  => T*
*mut T    => T!*
&T        => T&
&'a T     => T&'a
&mut T    => T!&
&'a mut T => T!&'a
&'a&'b T  => T&'b&'a

// outlives syntax in 'where clause
where 'a:'b  => | 'a-'b     // the lifetime closer to the reference
                       // will outlive the other
   <'a T>Ref.{@field T&'a} | T - 'a
// struct Ref<'a,T:'a> {field: &'a T} => 

&'static str => str&'static



// https://rust-lang.github.io/rfcs/2250-finalize-impl-dyn-syntax.html#guide-level-explanation
// ! NOTE 'T' and 'E' are traits here, not a generic type; the type is the 'impl' or 'dyn'
&dyn T           => dyn-T&
&'a dyn T        => dyn-T&'a
Box<dyn T+E>     => <dyn-T+E>Box
Box::<{dyn T+E}> => <dyn-T+E>Box
&(dyn T+E)       => {dyn-T+E}&
impl T           => {impl-T+E}&
&impl T          => impl-T
impl T+E         => impl-T+E
&(impl T+E)      => {impl-T+E}&
Box<(impl T+E)>  => <impl-T+E>Box

// Check impl and dyn types for closures 
   // should be fine so long as matching is on "{dyn" and "{impl"

Fn() -> impl A + B        // ambiguous in Rust
(Fn() -> impl A) + B   =>  {{}Fn->impl-A} +B
Fn() -> (impl A + B)   =>  {}Fn->{impl-A+B}




// check generics
// Goal:: maximize generics with where clauses

   //alloc::boxed
   <{dyn-T+E}>Box::box::alloc
// alloc::box::Box::<{dyn T+E}>

   //alloc::boxed
   variable:<{dyn-T+E}>Box::box::alloc
// alloc::box::Box::<{dyn T+E}>(variable)

   @Type impl-Future<Output = T> + Send
// type  Type = impl Future<Output = T> + Send;

   ("the", "Turbofish", "remains", "undefeated")
   `(the, guardian, stands, resolute) @
                                                       //  resolute->(bool,bool)
   (the<guardian, stands>resolute) @  _ (bool, bool)   //        works as you expect in this language
   (the:<guardian, stands>resolute) @  _ (bool, bool)  // ((bool,bool),)  //fail
   the:<guardian, stands>resolute @  _ (bool, bool)    // (bool,bool)
   the:<guardian stands>resolute @  _ (bool, bool)     // (bool,bool)

// let (the, guardian, stands, resolute) = 
//     ("the", "Turbofish", "remains", "undefeated");
//     let _: (bool, bool) = (the<guardian, stands>(resolute));

   impl-Future<@Outut T>
// impl Future<Output = T> // return of an async fn

   impl-T<'a Gen #Delta i32 @Out T>   // order: lifetime,GenType,ConstGen,AssocType
// impl T<'a, Gen, const Delta: usize, 

   // Silly example
   trait\ <'a T #O usize>Silly {
     @Bar
     @Foo
   }
   fn\ ;<S>baz
     \ ;-
     | S - <'static i32 4 @Foo usize @Bar = u8>Silly
     {}
// trait Silly<'a, T, const 0: usize> {
//     type Bar;
//     type Foo;
// }
// fn baz<S>() 
//     where S: Silly<'static, i32, 4, Foo = usize, Bar = u8>
// {}

// ":fn" is equivalent to ':' its okay to write either
// ';' is void as in no arguments, it is placed where ':' and the arguments would be // Rust: "fn()"
// !NOTE void is not the same as unit '()', unit can be an argument and a return
//       void is not a valid return type in Rust // Error!: "->;" 
// '-' replaces return unit // Rust: "->()" 
// using void as an argument or a return is a hard error
//        ; | ;:->i32 | i32:;; | ;:- thes are all ERRORS
fn(i32)->i32       => i32:->i32
fn(i32,i32)->i32   => i32: i32->i32
fn(i32,i32)        => i32: i32-
fn()->i32          => ;->i32
fn()               => ;-
fn()->()           => ;-
fn(i32)            => i32:-          or i32:fn-
fn(())             => ():-           or ():fn-
fn(())->()         => ():-           or ():fn-
fn((),i32)->()     => (): i32-       or ():i32-
fn(fn())->i32      => ;():->i32      or ;- :fn->i32
fn(fn(),fn())      => ;-: ;--        or ;- :fn ;--
fn(fn(),fn(),fn()) => ;-: ;- ;--     or ;- :fn ;() ;--
fn(fn(),i32,fn())  => ;-: i32 ;--    or ;- :fn i32 ;--


// closure traits use ":FnOnce" ":FnMut" ":Fn" 
FnMut(i32) -> i32  =>
   // For closure traits
Fn(i32,i32)->i32   => i32:Fn i32->i32
Fn()               => ;Fn-
FnMut()->i32       => ;FnMut->i32
FnOnce(())         => ():FnOnce-

// TODO check async and await
// TODO check Semicolon with array syntax [;- ; #N usize] 
            // it's probably okay

## advanced features:
# compile time combinators  // probably not possible for operators
   // :{op_literal}:function
   // :{op_literal}.method
   y:+:f y

// example combinator: Rotate Arguments
// arguments can be rotated right with ':' followed by a number of
// '>' before the function
// the max rotation is: arity -1

   x:>.div y  // swaps arguments, this should be the most popular way to use it.
// y.div(x)

   1 :>>:first_of_four 2 3 4
   1`2 3 4 :>>:first_of_four
// first_of_four(3,4,2,1)
3

   // These are errors: not enough arguments
   :>;output_5    // also this is not an expression
   x:>.reciprical
   x:>>.div y

# Scoped text substitution
// symbols must be the exactly the same as an ident, 
// text replacement is placed like attribute macros
// substitution happens from the smallest scope working outwards, 
// substitution does one pass per scope, and _no_ more
   // outer replacement ~|  symbol "text" 
   // inner replacement ~!| symbol "text"

   // inner replacement placed at the top of a module
			~!| sig "i32: i32->i32"
      // many lines later
   fn\x :add y \~sig {x+y}

   // inner replacement, inside a scope
   fn\x :mul y \ [i32;4]: ->i32 {
     ~!| uw "unwrap" | ii "into_iter"       // you can define more than one on a single line, just use '|'
       | s "<i32>sum"                       // it's okay to use a new line for more symbols, but it must start with '|'
       | h """\""Hello\"" said my friend""" // interior quotes require double quotes inside
                                            // I want to format this, so I have to escape my double quotes
                                                  // as thought it where one  \" => \""
                                            // TODO, consider raw strings
     {~h}:!println
     x:Some @ f
     f.~uw&.~ii.~s   // equivalent: f.unwrap.into_iter.sum
   }                 

   // when placed above a funcion as an outer attribute, 
   // it can be useful for renaming variables at transpile time

   ~| n "numerator" | d "denominator"
   fn\n :divide d \ f32: f32 -> f32 {n/d}
// fn divide(numerator:i32,denominator:i32)->i32 {
//     numerator/denominator
// }

   // it can also be used to import a library for a function signature

   ~| Rc "Rc::rc::std" | i "<i32>"
   fn\x :f y \ ~Rc~i: ~Rc~i -> ~Rc~i {
        
       x*+{*y}:from::~Rc
   }
// fn rc_add(x: std::rc::Rc<i32>, y: std::rc::Rc<i32>) -> std::rc::Rc<i32> {
//     std::rc::Rc::from(*x + *y)
// }

   // you can improve the look of the transpile by stopping at the use statement
   ~| Rc "Rc::rc::std" | i "<i32>"
   fn\x :f y \ ~Rc~i: ~Rc~i -> ~Rc~i {
       use ~Rc; 
       x*+{*y}:from::Rc
   }
// fn rc_add(x: std::rc::Rc<i32>, y: std::rc::Rc<i32>) -> std::rc::Rc<i32> {
//     use std::rc::Rc;
//     Rc::from(*x + *y)
// }



   fn\;foo \ ;- {\U.{}}   
// fn foo() {unsafe {}}


   fn\ ;foo \ ;- unsafe.{}
   fn\ ;foo \ ;- \U.{}
// fn foo() unsafe {}  // not real Rust


   fn\ ;foo \ ;-> <@Output ()>impl-Future {async.{}}
   fn\ ;foo \ ;-> <@Output ()>impl-Future {\A.{}}
// fn foo() -> impl Future<Output = ()> { async {} }

   fn\ ;foo \ ;-> <@Output ()>impl-Future async.{}
   fn\ ;foo \ ;-> <@Output ()>impl-Future {\A.{}}
// fn foo() -> impl Future<Output = ()>  async {}  // not real Rust

   % entry
   fn\ ;blah \ ;- {}
// #[entry]
// fn blah() {}

   advanced comments
   %;any:cfg
// #[cfg(any())]    // comments out the code

   // prelude symbols
   ~!| nope ";any:cfg"    // already there
   %!~nope



#Unions
   // unions ared differenciated from structs using '?' instead of '@' // maybe using @ is fine
   union\ MyUnion.{@f1 i32, @f2 f32}
   MyUnion.{5 ?f1}
// union MyUnion {f1: i32, f2: f32}
// MyUnion {f1: 5}


   // patern matching Unions
   \U.{
     u?{ 
         MyUnion.{10 @f1}=> ("ten"):!println
         MyUnion { f2 } => println!("{}", f2)   // keep the '@' ?          "MyUnion { val?f2 } => println!("{}", val)
     }
			}
// unsafe {
//   match u {
//     MyUnion { f1: 10 } => println!("ten"),
//     MyUnion { f2 } => println!("{}", f2)        // this should probably be "f2:val" where binding is val
//   }
// }


# compound expression scopes
   // like 'async move' in  Rust, you can compound more brace types
   fn\ x!:f 
     \ i32:->i32
     \ UAM-x'{}                     // this needs work
// fn(mut x:i32)->i32 
// { unsafe{ async move{ loop{ match x {} } } } }



# Static
   5 @ x'static i32
// static x:i32 = 5;

   5 @ x!'static i32
// static mut x:i32 = 5;


# Extern
   extern\ "C" {
       fn\ x:foo y \ i32: i32->i32 _
       fn\ format:with_name \ u8*:- _
   }
// extern "C" {
//     fn foo(x: i32, y:i32)->i32;
//     fn with_name(format: *const u8);
// }


# attributes on generics
   %MyFlexibleClone:derive
   struct\ <H>Foo.{a:H*} | H - %unbounded:my_flexible_clone     // this could be an issue
// #[derive(MyFlexibleClone)]
// struct Foo<#[my_flexible_clone(unbounded)] H> {
//     a: *const H
// }

# arrays
   [5;4]
// [5;4]
[5, 5, 5, 5]

   [1, 2, 3, 4]
// [1, 2, 3, 4]
[1, 2, 3, 4]

   [1
    2
    3
    4]
// [1,
    2,
    3,
    4]
[1, 2, 3, 4]

   // indexing
   x.[5]
// x[5]


# fully-quallifies call syntax
   f.print
   f&:print::Foo
   f&:print::<Foo :<Pretty>>
   f&:print::<Bar :<Pretty>>
// f.print();
// Foo::print(&f);
// <Foo as Pretty>::print(&f);
// <Bar as Pretty>::print(&b);

# more types
bool 
numeric (u8,u16,u32,u64,u128)
        (i8,i16,i32,i64,i128)
textual types (char, str)
slice =>     [char]&
          // &[char]
DST   =>     [char]
never =>     NEVER
          // !
tuple =>     (T)
          // (T,)
             (T,T)
          // (T,T)
Array =>     [T; #usize]
          // [T; const usize]



# more shorthand
   AU.fn\  
// async unsafe fn
   \UAM.{}
// unsafe{async move{}}
   \AMU.{}
// async move {unsafe{}}
   \M.\|{}
// {move ||}
